plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

def javafxVersion = '17.0.7'

// Determine target OS for JavaFX natives.
// Use:  ./gradlew clean shadowJar -Pos=win   (or mac / linux)
// Default: detect from current JVM if -Pos not given.
def osProp = findProperty("os")?.toString()
def currentOs = org.gradle.internal.os.OperatingSystem.current()
def detectedOs = currentOs.isWindows() ? "win" : (currentOs.isMacOsX() ? "mac" : "linux")
def targetOs = (osProp in ["win","mac","linux"]) ? osProp : detectedOs

dependencies {
    implementation "org.openjfx:javafx-base:${javafxVersion}:${targetOs}"
    implementation "org.openjfx:javafx-controls:${javafxVersion}:${targetOs}"
    implementation "org.openjfx:javafx-fxml:${javafxVersion}:${targetOs}"
    implementation "org.openjfx:javafx-graphics:${javafxVersion}:${targetOs}"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly   'org.junit.platform:junit-platform-launcher:1.10.2'
}

application {
    // Your launcher class:
    mainClass = "kenma.Launcher"
    // (Note: enableAssertions here affects `gradlew run`, not the JAR.)
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']
    }
}

/* === Tests === */
test {
    useJUnitPlatform()
}

/* === Shadow JAR config === */
tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveBaseName.set('kenma')      // <-- was 'duke'
    archiveVersion.set('')            // no version suffix
    archiveClassifier.set(targetOs)   // keeps OS suffix, e.g. kenma-win.jar
    manifest {
        attributes 'Main-Class': 'kenma.Launcher'  // be explicit
    }
    mergeServiceFiles()
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

/* === Checkstyle === */
checkstyle {
    toolVersion = '10.12.4'
    configFile = file('config/checkstyle/checkstyle.xml')
    configProperties = ["suppressionFile": file('config/checkstyle/suppressions.xml')]
}
tasks.withType(Checkstyle).configureEach {
    reports {
        html.required = true
        xml.required  = false
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

/* === Gradle 'run' task === */
run {
    standardInput = System.in
    enableAssertions = true
}
